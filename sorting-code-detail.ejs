<%- include('header', {currentMenu: 'sorting-code-detail', pageTitle: 'Sorting code detail'}); %>

<div class="row m-0 mt-1">
    <div class="col-lg-3">
        <span class="badge badge-pill badge-light">
                <select id="update_period" class="pt-2 pb-2 pl-2 pr-2"
                        style="border:0;background-color: #f8f9fa; font-weight: bold; font-size: 12px;">
                    <option selected>Every 5 minutes</option>
                    <option>Hourly</option>
                </select>
            </span>
    </div>
</div>
<div class="row mt-4">
    <div class="col-lg-12 mt-4" id="new-volume-chart" style="height: 450px;">New Volume</div>
</div>

</div>

<%- include('footer', {currentMenu: 'sorting-code-detail'}); %>
<script src="js/jquery-bootstrap.js"></script>
<script src="js/daterangepicker/moment.min.js"></script>
<script src="js/jquery.newsTicker.js"></script>
<script src="js/datepicker/bootstrap-datepicker.min.js"></script>
<script src="js/nav.js"></script>
<script>
    const Highcharts = require('highcharts/highstock')
    require('highcharts/modules/exporting')(Highcharts);
    require('highcharts/modules/export-data')(Highcharts);

    let update_period = 'Every 5 minutes';
    const sc_color_codes = {
        'sc0': '#34d399',
        'sc1': '#38bdf8',
        'sc3': '#fb923c',
        'sc4': '#e879f9',
        'sc5': '#818cf8',
        'sc6': '#c084fc',
        'sc7': '#2dd4bf',
        'sc8': '#292524',
        'sc9': '#facc15',
        'sc10': '#a3e635',
        'sc12': '#0891b2',
        'sc14': '#dc2626',
        'sc16': '#c026d3',
        'sc17': '#7e22ce',
        'sc18': '#a1a1aa',
        'sc21': '#fde047',
    };
    let scs_info = [], start_time = null, end_time = null, shift_strating_time = null, scs_data={};

    jQuery(document).ready(function () {
        // drop down of period
        jQuery('#update_period').change(function () {
            update_period = jQuery(this).val();
            ipcRenderer.send("get:views", selected_machine, "sorting-code-detail");
        });

        // machine slection
        jQuery("#ip_list_dropdown").change(function () {
            selected_machine = jQuery(this).val();
            if (selected_machine !== "") {
                let selected_machine_name = machine_list[selected_machine];
                jQuery("#display_machine_name").text(selected_machine_name);
            } else {
                jQuery("#display_machine_name").text("Select a machine");
                selected_machine = 0;
            }
            ipcRenderer.send("get:views", selected_machine, "sorting-code-detail");
        });
    });

    ipcRenderer.on('render:sorting-code-detail', function (e, basic_info) {
        console.log(basic_info);
        Object.values(basic_info['scsInfo']).forEach(v => {
            scs_data["sc" + v.value] = {code:"sc" + v.value,
                color: sc_color_codes["sc" + v.value],
                value:0,
                label: v.label
            };
        });
        ipcRenderer.send("sendRequest", selected_machine, 'getStatisticsCounterLast', {});
        setInterval(() => {
            ipcRenderer.send("sendRequest", selected_machine, 'getStatisticsCounterLast', {});
        }, 60000);
    });
    ipcRenderer.on('getStatisticsCounterLast', function (e, data_result) {
        let converted_shift_started_time = null, diff = null;
        shift_strating_time = data_result['statistics'][0]['created_at_timestamp'];
        diff = update_period === 'Hourly' ? moment(shift_strating_time).minutes() : moment(shift_strating_time).minutes() % 3;
        converted_shift_started_time = shift_strating_time - diff*60;
        end_time = moment().unix();
        start_time = moment().subtract(24, 'hours').unix();
        if ((moment().unix() - moment(converted_shift_started_time)) / 3600 <= 24) {
            start_time = converted_shift_started_time;
        }

        if (update_period === 'Hourly') {
            // ipcRenderer.send('getStatisticsHourly', selected_machine, start_time, end_time)
            ipcRenderer.send("sendRequest", selected_machine, 'getStatisticsHourly', {
                'from_timestamp': start_time,
                'to_timestamp': end_time
            });
        } else {
            // ipcRenderer.send('getStatistics', selected_machine, start_time, end_time);
            ipcRenderer.send("sendRequest", selected_machine, 'getStatistics', {
                'from_timestamp': start_time,
                'to_timestamp': end_time
            });
        }
    });

    ipcRenderer.on('getStatisticsHourly', function (e, data_result) {
        console.log('hourly', data_result);
        populateChart(data_result['statistics']);
    });

    ipcRenderer.on('getStatistics', function (e, data_result) {
        console.log('minutes', data_result);
        populateChart(data_result['statistics']);
    });

    function populateChart(statistics_result={}) {
        let volume_chart_data= Object.keys(scs_data).map(key=> ({
            name: scs_data[key].label,
            color:scs_data[key].color,
            code: scs_data[key].code,
            data:[],
            total:0
        }));

        for (k in statistics_result) {
            let time_slot = statistics_result[k]['created_at_timestamp'];
            time_slot = Number(moment.unix(time_slot));

            volume_chart_data.forEach(d => {
                d.total += Number(statistics_result[k][d["code"]]);
                d.data.push([time_slot, Number(statistics_result[k][d["code"]])]);
            });
        }

        volume_chart_data.sort((a,b)=> a.total - b.total);
        new Highcharts.chart('new-volume-chart', {
            chart: {
                type: 'column',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                borderColor: '#D3D3D3',
                borderWidth: 1
            },
            time: {
                useUTC: false
            },
            title: {
                text: 'Volume'
            },
            accessibility: {
                announceNewData: {
                    enabled: true,
                    minAnnounceInterval: 15000,
                    announcementFormatter: function (allSeries, newSeries, newPoint) {
                        if (newPoint) {
                            return 'New point added. Value: ' + newPoint.y;
                        }
                        return false;
                    }
                }
            },
            xAxis: {
                type: 'datetime',
                tickInterval: update_period === 'Hourly'? 1000*60*60 : 1000*60*5
            },

            yAxis: {
                title: {
                    text: null
                },
                tickInterval: 10,
                tickWidth: 1,
                tickLength: 5,
                min: 0
            },
            // tooltip: {
            //     headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            //     pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
            //         '<td style="padding:0"><b>{point.y} </b></td></tr>',
            //     footerFormat: '</table>',
            //     shared: true,
            //     useHTML: true
            // },
            tooltip: {
                formatter: function () {
                    return '<b>' + moment(this.x).format("YYYY-MM-DD") + '</b><br/>' +
                        this.series.name + ': ' + this.y + '<br/>' +
                        'Total: ' + this.point.stackTotal;
                }
            },
            legend: {
                enabled: true
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            },
            exporting: {
                enabled: true,
                buttons: {
                    contextButton: {
                        menuItems: ['downloadCSV', 'separator', 'downloadPDF', 'downloadPNG']
                    }
                }
            },
            credits: {
                enabled: false
            },
            series: volume_chart_data.map(d => ({
                name: d.name,
                color: d.color,
                data: d.data
            }))
        });
    }
</script>
